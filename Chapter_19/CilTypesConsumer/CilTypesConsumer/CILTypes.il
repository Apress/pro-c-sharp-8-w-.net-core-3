
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.5.30319.0


// ----- DOS Header:
// Magic:                      0x5a4d
// Bytes on last page:         0x0090
// Pages in file:              0x0003
// Relocations:                0x0000
// Size of header (paragraphs):0x0004
// Min extra paragraphs:       0x0000
// Max extra paragraphs:       0xffff
// Initial (relative) SS:      0x0000
// Initial SP:                 0x00b8
// Checksum:                   0x0000
// Initial IP:                 0x0000
// Initial (relative) CS:      0x0000
// File addr. of reloc table:  0x0040
// Overlay number:             0x0000
// OEM identifier:             0x0000
// OEM info:                   0x0000
// File addr. of COFF header:  0x0080
// ----- COFF/PE Headers:
// Signature:                  0x00004550
// ----- COFF Header:
// Machine:                    0x014c
// Number of sections:         0x0002
// Time-date stamp:            0x5e816a93
// Ptr to symbol table:        0x00000000
// Number of symbols:          0x00000000
// Size of optional header:    0x00e0
// Characteristics:            0x2102
// ----- PE Optional Header (32 bit):
// Magic:                          0x010b
// Major linker version:           0x0b
// Minor linker version:           0x00
// Size of code:                   0x00000600
// Size of init.data:              0x00000200
// Size of uninit.data:            0x00000000
// Addr. of entry point:           0x0000245e
// Base of code:                   0x00002000
// Base of data:                   0x00004000
// Image base:                     0x00400000
// Section alignment:              0x00002000
// File alignment:                 0x00000200
// Major OS version:               0x0004
// Minor OS version:               0x0000
// Major image version:            0x0000
// Minor image version:            0x0000
// Major subsystem version:        0x0004
// Minor subsystem version:        0x0000
// Size of image:                  0x00006000
// Size of headers:                0x00000200
// Checksum:                       0x00000000
// Subsystem:                      0x0003
// DLL characteristics:            0x8540
// Size of stack reserve:          0x00100000
// Size of stack commit:           0x00001000
// Size of heap reserve:           0x00100000
// Size of heap commit:            0x00001000
// Loader flags:                   0x00000000
// Directories:                    0x00000010
// 0x00000000 [0x00000000] address [size] of Export Directory:          
// 0x00002408 [0x00000053] address [size] of Import Directory:          
// 0x00000000 [0x00000000] address [size] of Resource Directory:        
// 0x00000000 [0x00000000] address [size] of Exception Directory:       
// 0x00000000 [0x00000000] address [size] of Security Directory:        
// 0x00004000 [0x0000000c] address [size] of Base Relocation Table:     
// 0x00000000 [0x00000000] address [size] of Debug Directory:           
// 0x00000000 [0x00000000] address [size] of Architecture Specific:     
// 0x00000000 [0x00000000] address [size] of Global Pointer:            
// 0x00000000 [0x00000000] address [size] of TLS Directory:             
// 0x00000000 [0x00000000] address [size] of Load Config Directory:     
// 0x00000000 [0x00000000] address [size] of Bound Import Directory:    
// 0x00002000 [0x00000008] address [size] of Import Address Table:      
// 0x00000000 [0x00000000] address [size] of Delay Load IAT:            
// 0x00002008 [0x00000048] address [size] of CLR Header:                


// Image sections:
//              .text
//              0x00000464 Virtual Size
//              0x00002000 Virtual Address
//              0x00000600 Size of Raw Data
//              0x00000200 Pointer to Raw Data
//              0x00000000 Pointer to Relocations
//              0x00000000 Pointer to Linenumbers
//                  0x0000 Number of Relocations
//                  0x0000 Number of Linenumbers
//              0x60000020 Characteristics
//                         CNT_CODE
//                         MEM_EXECUTE
//                         MEM_READ

//              .reloc
//              0x0000000c Virtual Size
//              0x00004000 Virtual Address
//              0x00000200 Size of Raw Data
//              0x00000800 Pointer to Raw Data
//              0x00000000 Pointer to Relocations
//              0x00000000 Pointer to Linenumbers
//                  0x0000 Number of Relocations
//                  0x0000 Number of Linenumbers
//              0x42000040 Characteristics
//                         CNT_INITIALIZED_DATA
//                         MEM_DISCARDABLE
//                         MEM_READ

// Base Relocation Table
//              0x00002000 Page RVA
//              0x0000000c Block Size
//              0x00000002 Number of Entries
//              Entry 1: Type 0x3 Offset 0x00000460
//              Entry 2: Type 0x0 Offset 0x00000000

// Import Address Table
//     DLL : mscoree.dll
//              0x00002000 Import Address Table
//              0x0000244e Import Name Table
//              0          Time Date Stamp
//              0          Index of First Forwarder Reference
//
//              0x0000  _CorDllMain

// Delay Load Import Address Table
// No data.

// Entry point code:
//FF 25 00 20 40 00 


// ----- CLR Header:
// Header size:                        0x00000048
// Major runtime version:              0x0002
// Minor runtime version:              0x0005
// 0x00002074 [0x00000394] address [size] of Metadata Directory:        
// Flags:                              0x00000001
// Entry point token:                  0x00000000
// 0x00000000 [0x00000000] address [size] of Resources Directory:       
// 0x00000000 [0x00000000] address [size] of Strong Name Signature:     
// 0x00000000 [0x00000000] address [size] of CodeManager Table:         
// 0x00000000 [0x00000000] address [size] of VTableFixups Directory:    
// 0x00000000 [0x00000000] address [size] of Export Address Table:      
// 0x00000000 [0x00000000] address [size] of Precompile Header:         

// Metadata Header
//    Storage Signature:
//              0x424a5342 Signature
//                  0x0001 Major Version
//                  0x0001 Minor Version
//              0x00000000 Extra Data Offset
//              0x0000000c Version String Length
//              'v4.0.30319' Version String
//    Storage Header:
//                    0x00 Flags
//                  0x0005 Number of Streams
//    Stream 1:
//              0x0000006c Offset
//              0x000001a8 Size
//              '#~' Name
//    Stream 2:
//              0x00000214 Offset
//              0x00000108 Size
//              '#Strings' Name
//    Stream 3:
//              0x0000031c Offset
//              0x00000024 Size
//              '#US' Name
//    Stream 4:
//              0x00000340 Offset
//              0x00000010 Size
//              '#GUID' Name
//    Stream 5:
//              0x00000350 Offset
//              0x00000044 Size
//              '#Blob' Name

//    Metadata Stream Header:
//              0x00000000 Reserved
//                    0x02 Major
//                    0x00 Minor
//                    0x00 Heaps
//                    0x01 Rid
//      0x0000040901a20f57 MaskValid
//      0x000016003325fa00 Sorted

// Code Manager Table:
//  default


// Export Address Table Jumps:
// No data.

// File size            : 2560
// PE header size       : 512 (456 used)    (20.00%)
// PE additional info   : 175               ( 6.84%)
// Num.of PE sections   : 2
// CLR header size     : 72                 ( 2.81%)
// CLR meta-data size  : 916                (35.78%)
// CLR additional info : 0                  ( 0.00%)
// CLR method headers  : 15                 ( 0.59%)
// Managed code         : 19                ( 0.74%)
// Data                 : 512               (20.00%)
// Unaccounted          : 339               (13.24%)

// Num.of PE sections   : 2
//   .text    - 1536
//   .reloc   - 512

// CLR meta-data size  : 916
//   Module        -    1 (10 bytes)
//   TypeDef       -    7 (98 bytes)      1 interfaces, 0 explicit layout
//   TypeRef       -    3 (18 bytes)
//   MethodDef     -    4 (56 bytes)      0 abstract, 0 native, 4 bodies
//   FieldDef      -    5 (30 bytes)      0 constant
//   MemberRef     -    1 (6 bytes)
//   ParamDef      -    3 (18 bytes)
//   Constant      -    3 (18 bytes)
//   StandAloneSig -    1 (2 bytes)
//   InterfaceImpl -    1 (4 bytes)
//   PropertyMap   -    1 (4 bytes)
//   Property      -    1 (6 bytes)
//   MethodSemantic-    2 (12 bytes)
//   Assembly      -    1 (22 bytes)
//   AssemblyRef   -    1 (20 bytes)
//   GenericParam  -    1 (8 bytes)
//   Strings       -   261 bytes
//   Blobs         -    68 bytes
//   UserStrings   -    36 bytes
//   Guids         -    16 bytes
//   Uncategorized -   203 bytes

// CLR method headers : 15
//   Num.of method bodies  - 4
//   Num.of fat headers    - 1
//   Num.of tiny headers   - 3

// Managed code : 19
//   Ave method size - 4
// Classes defined in this module:
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Interface IMyInterface                   (public) (abstract) (auto) (ansi) 
// Class MyBaseClass                    (public) (auto) (ansi) 
// Class MyDerivedClass                 (public) (auto) (ansi) 
// Class MyStruct                       (public) (auto) (ansi) (sealed) 
// Class MyEnum                         (public) (auto) (ansi) (sealed) 
// Class MyGenericClass`1               (public) (auto) (ansi) 
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ================================= M E T A I N F O ================================================

// ===========================================================
// ScopeName : CILTypes.dll
// MVID      : {776B1CB2-9B9F-4ECB-B8DB-3E957A93D35B}
// ===========================================================
// Global functions
// -------------------------------------------------------
// 
// Global fields
// -------------------------------------------------------
// 
// Global MemberRefs
// -------------------------------------------------------
// 
// TypeDef #1 (02000002)
// -------------------------------------------------------
// 	TypDefName: MyNamespace.IMyInterface  (02000002)
// 	Flags     : [Public] [AutoLayout] [Interface] [Abstract] [AnsiClass]  (000000a1)
// 	Extends   : 01000000 [TypeRef] 
// 
// TypeDef #2 (02000003)
// -------------------------------------------------------
// 	TypDefName: MyNamespace.MyBaseClass  (02000003)
// 	Flags     : [Public] [AutoLayout] [Class] [AnsiClass]  (00000001)
// 	Extends   : 01000001 [TypeRef] System.Object
// 	Field #1 (04000001)
// 	-------------------------------------------------------
// 		Field Name: stringField (04000001)
// 		Flags     : [Private]  (00000001)
// 		CallCnvntn: [FIELD]
// 		Field type:  String
// 
// 	Field #2 (04000002)
// 	-------------------------------------------------------
// 		Field Name: intField (04000002)
// 		Flags     : [Private]  (00000001)
// 		CallCnvntn: [FIELD]
// 		Field type:  I4
// 
// 	Method #1 (06000001) 
// 	-------------------------------------------------------
// 		MethodName: .ctor (06000001)
// 		Flags     : [Public] [HideBySig] [ReuseSlot] [SpecialName] [RTSpecialName] [.ctor]  (00001886)
// 		RVA       : 0x00002050
// 		ImplFlags : [IL] [Managed]  (00000000)
// 		CallCnvntn: [DEFAULT]
// 		hasThis 
// 		ReturnType: Void
// 		2 Arguments
// 			Argument #1:  String
// 			Argument #2:  I4
// 		2 Parameters
// 			(1) ParamToken : (08000001) Name : s flags: [none] (00000000)
// 			(2) ParamToken : (08000002) Name : i flags: [none] (00000000)
// 
// 	Method #2 (06000002) 
// 	-------------------------------------------------------
// 		MethodName: get_TheString (06000002)
// 		Flags     : [Public] [HideBySig] [ReuseSlot] [SpecialName]  (00000886)
// 		RVA       : 0x00002052
// 		ImplFlags : [IL] [Managed]  (00000000)
// 		CallCnvntn: [DEFAULT]
// 		hasThis 
// 		ReturnType: String
// 		No arguments.
// 
// 	Method #3 (06000003) 
// 	-------------------------------------------------------
// 		MethodName: set_TheString (06000003)
// 		Flags     : [Public] [HideBySig] [ReuseSlot] [SpecialName]  (00000886)
// 		RVA       : 0x00002054
// 		ImplFlags : [IL] [Managed]  (00000000)
// 		CallCnvntn: [DEFAULT]
// 		hasThis 
// 		ReturnType: Void
// 		1 Arguments
// 			Argument #1:  String
// 		1 Parameters
// 			(1) ParamToken : (08000003) Name : value flags: [none] (00000000)
// 
// 	Method #4 (06000004) 
// 	-------------------------------------------------------
// 		MethodName: MyLocalVariables (06000004)
// 		Flags     : [Public] [Static] [HideBySig] [ReuseSlot]  (00000096)
// 		RVA       : 0x00002058
// 		ImplFlags : [IL] [Managed]  (00000000)
// 		CallCnvntn: [DEFAULT]
// 		ReturnType: Void
// 		No arguments.
// 
// 	Property #1 (17000001)
// 	-------------------------------------------------------
// 		Prop.Name : TheString (17000001)
// 		Flags     : [none] (00000000)
// 		CallCnvntn: [PROPERTY]
// 		hasThis 
// 		ReturnType: String
// 		No arguments.
// 		DefltValue: 
// 		Setter    : (06000003) set_TheString
// 		Getter    : (06000002) get_TheString
// 		0 Others
// 
// 
// TypeDef #3 (02000004)
// -------------------------------------------------------
// 	TypDefName: MyNamespace.MyDerivedClass  (02000004)
// 	Flags     : [Public] [AutoLayout] [Class] [AnsiClass]  (00000001)
// 	Extends   : 02000003 [TypeDef] MyNamespace.MyBaseClass
// 	InterfaceImpl #1 (09000001)
// 	-------------------------------------------------------
// 		Class     : MyNamespace.MyDerivedClass
// 		Token     : 02000002 [TypeDef] MyNamespace.IMyInterface
// 
// 
// TypeDef #4 (02000005)
// -------------------------------------------------------
// 	TypDefName: MyNamespace.MyStruct  (02000005)
// 	Flags     : [Public] [AutoLayout] [Class] [Sealed] [AnsiClass]  (00000101)
// 	Extends   : 01000002 [TypeRef] System.ValueType
// 
// TypeDef #5 (02000006)
// -------------------------------------------------------
// 	TypDefName: MyNamespace.MyEnum  (02000006)
// 	Flags     : [Public] [AutoLayout] [Class] [Sealed] [AnsiClass]  (00000101)
// 	Extends   : 01000003 [TypeRef] System.Enum
// 	Field #1 (04000003)
// 	-------------------------------------------------------
// 		Field Name: A (04000003)
// 		Flags     : [Public] [Static] [Literal] [HasDefault]  (00008056)
// 	DefltValue: (I4) 0
// 		CallCnvntn: [FIELD]
// 		Field type:  ValueClass MyNamespace.MyEnum
// 
// 	Field #2 (04000004)
// 	-------------------------------------------------------
// 		Field Name: B (04000004)
// 		Flags     : [Public] [Static] [Literal] [HasDefault]  (00008056)
// 	DefltValue: (I4) 1
// 		CallCnvntn: [FIELD]
// 		Field type:  ValueClass MyNamespace.MyEnum
// 
// 	Field #3 (04000005)
// 	-------------------------------------------------------
// 		Field Name: C (04000005)
// 		Flags     : [Public] [Static] [Literal] [HasDefault]  (00008056)
// 	DefltValue: (I4) 2
// 		CallCnvntn: [FIELD]
// 		Field type:  ValueClass MyNamespace.MyEnum
// 
// 
// TypeDef #6 (02000007)
// -------------------------------------------------------
// 	TypDefName: MyNamespace.MyGenericClass`1  (02000007)
// 	Flags     : [Public] [AutoLayout] [Class] [AnsiClass]  (00000001)
// 	Extends   : 01000001 [TypeRef] System.Object
// 	1 Generic Parameters
// 		(0) GenericParamToken : (2a000001) Name : T flags: 00000000 Owner: 02000007
// 
// TypeRef #1 (01000001)
// -------------------------------------------------------
// Token:             0x01000001
// ResolutionScope:   0x23000001
// TypeRefName:       System.Object
// 	MemberRef #1 (0a000001)
// 	-------------------------------------------------------
// 		Member: (0a000001) .ctor: 
// 		CallCnvntn: [DEFAULT]
// 		hasThis 
// 		ReturnType: Void
// 		No arguments.
// 
// TypeRef #2 (01000002)
// -------------------------------------------------------
// Token:             0x01000002
// ResolutionScope:   0x23000001
// TypeRefName:       System.ValueType
// 
// TypeRef #3 (01000003)
// -------------------------------------------------------
// Token:             0x01000003
// ResolutionScope:   0x23000001
// TypeRefName:       System.Enum
// 
// Signature #1 (0x11000001)
// -------------------------------------------------------
// 		CallCnvntn: [LOCALSIG]
// 		3 Arguments
// 			Argument #1:  String
// 			Argument #2:  I4
// 			Argument #3:  Object
// 
// Assembly
// -------------------------------------------------------
// 	Token: 0x20000001
// 	Name : CILTypes
// 	Public Key    :
// 	Hash Algorithm : 0x00000000
// 	Version: 1.0.0.0
// 	Major Version: 0x00000001
// 	Minor Version: 0x00000000
// 	Build Number: 0x00000000
// 	Revision Number: 0x00000000
// 	Locale: <null>
// 	Flags : [none] (00000000)
// 
// AssemblyRef #1 (23000001)
// -------------------------------------------------------
// 	Token: 0x23000001
// 	Public Key or Token: b0 3f 5f 7f 11 d5 0a 3a 
// 	Name: System.Runtime
// 	Version: 4.2.2.0
// 	Major Version: 0x00000004
// 	Minor Version: 0x00000002
// 	Build Number: 0x00000002
// 	Revision Number: 0x00000000
// 	Locale: <null>
// 	HashValue Blob:
// 	Flags: [none] (00000000)
// 
// 
// User Strings
// -------------------------------------------------------
// 70000001 : (16) L"CIL code is fun!"
// 
// 
// Coff symbol name overhead:  0
// ===========================================================
// ===========================================================
// ================================= END OF METAINFO ================================================


// Metadata version: v4.0.30319
.assembly extern /*23000001*/ System.Runtime
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:2:2:0
}
.assembly /*20000001*/ CILTypes
{
  .ver 1:0:0:0
}
.module CILTypes.dll
// MVID: {776B1CB2-9B9F-4ECB-B8DB-3E957A93D35B}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0003       // WINDOWS_CUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x000001FDCA070000


// =============== CLASS MEMBERS DECLARATION ===================

.class /*02000002*/ interface public abstract auto ansi MyNamespace.IMyInterface
{
} // end of class MyNamespace.IMyInterface

.class /*02000003*/ public auto ansi MyNamespace.MyBaseClass
       extends [System.Runtime/*23000001*/]System.Object/*01000001*/
{
  .field /*04000001*/ private string stringField
  .field /*04000002*/ private int32 intField
  .method /*06000001*/ public hidebysig specialname rtspecialname 
          instance void  .ctor(string s,
                               int32 i) cil managed
  // SIG: 20 02 01 0E 08
  {
    // Method begins at RVA 0x2050
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method MyBaseClass::.ctor

  .method /*06000002*/ public hidebysig specialname 
          instance string  get_TheString() cil managed
  // SIG: 20 00 0E
  {
    // Method begins at RVA 0x2052
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method MyBaseClass::get_TheString

  .method /*06000003*/ public hidebysig specialname 
          instance void  set_TheString(string 'value') cil managed
  // SIG: 20 01 01 0E
  {
    // Method begins at RVA 0x2054
    // Code size       1 (0x1)
    .maxstack  8
    IL_0000:  /* 2A   |                  */ ret
  } // end of method MyBaseClass::set_TheString

  .method /*06000004*/ public hidebysig static 
          void  MyLocalVariables() cil managed
  // SIG: 00 00 01
  {
    // Method begins at RVA 0x2058
    // Code size       16 (0x10)
    .maxstack  8
    .locals /*11000001*/ init (string V_0,
             int32 V_1,
             object V_2)
    IL_0000:  /* 72   | (70)000001       */ ldstr      "CIL code is fun!" /* 70000001 */
    IL_0005:  /* 0A   |                  */ stloc.0
    IL_0006:  /* 1F   | 21               */ ldc.i4.s   33
    IL_0008:  /* 0B   |                  */ stloc.1
    IL_0009:  /* 73   | (0A)000001       */ newobj     instance void [System.Runtime/*23000001*/]System.Object/*01000001*/::.ctor() /* 0A000001 */
    IL_000e:  /* 0C   |                  */ stloc.2
    IL_000f:  /* 2A   |                  */ ret
  } // end of method MyBaseClass::MyLocalVariables

  .property /*17000001*/ instance string TheString()
  {
    .get instance string MyNamespace.MyBaseClass/*02000003*/::get_TheString() /* 06000002 */
    .set instance void MyNamespace.MyBaseClass/*02000003*/::set_TheString(string) /* 06000003 */
  } // end of property MyBaseClass::TheString
} // end of class MyNamespace.MyBaseClass

.class /*02000004*/ public auto ansi MyNamespace.MyDerivedClass
       extends MyNamespace.MyBaseClass/*02000003*/
       implements MyNamespace.IMyInterface/*02000002*/
{
} // end of class MyNamespace.MyDerivedClass

.class /*02000005*/ public auto ansi sealed MyNamespace.MyStruct
       extends [System.Runtime/*23000001*/]System.ValueType/*01000002*/
{
} // end of class MyNamespace.MyStruct

.class /*02000006*/ public auto ansi sealed MyNamespace.MyEnum
       extends [System.Runtime/*23000001*/]System.Enum/*01000003*/
{
  .field /*04000003*/ public static literal valuetype MyNamespace.MyEnum/*02000006*/ A = int32(0x00000000)
  .field /*04000004*/ public static literal valuetype MyNamespace.MyEnum/*02000006*/ B = int32(0x00000001)
  .field /*04000005*/ public static literal valuetype MyNamespace.MyEnum/*02000006*/ C = int32(0x00000002)
} // end of class MyNamespace.MyEnum

.class /*02000007*/ public auto ansi MyNamespace.MyGenericClass`1<T>
       extends [System.Runtime/*23000001*/]System.Object/*01000001*/
{
} // end of class MyNamespace.MyGenericClass`1


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
